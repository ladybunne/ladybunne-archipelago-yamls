#          ((`\          -------------------
#       ___ \\ '--._    / hippity hoppity /
#    .'`   `'    o  )  /   ur checks r   /
#   /    \   '. __.'  /   my property   /
#  _|    /_  \ \_\_  -------------------
# {_\______\-'\__\_\                    

description: Ladybunne's main weighted yaml for Archipelago short syncs

name: Ladybunne{NUMBER}
game: 
  # The Legend of Zelda: 2
  # Slay the Spire: 1
  # Risk of Rain 2: 1
  # Kingdom Hearts 2: 2
  A Link to the Past: 1
  # Hollow Knight: 1

requires:
  version: 0.4.5
  plando: items



# The Legend of Zelda

The Legend of Zelda:
  progression_balancing: 50
  accessibility: items

  # Trying this out.
  local_items:
    - Stepladder

  # Expanded Pool adds room clear drops and Take Any Item caves to the pool.
  ExpandedPool: true 

  # Other options: dungeon, anywhere
  TriforceLocations: vanilla

  # TODO Think about changing this to dangerous depending on how bad the earlygame is.
  StartingPosition: very_dangerous

  plando_items:
    # Put Book of Magic in the bad corner where it belongs.
    # Ideally I force it to something like L9 Wizzrobes East Island, which you would
    # normally never visit... but because a random 50% of L9 is junked by the
    # generator, I need to provide a list of at least 50% + 1 checks.
    - item: Book of Magic
      locations:
        - Level 9 Item (Silver Arrow)
        - Level 9 Item (Red Ring)
        - Level 9 Map
        - Level 9 Compass
        - Level 9 Key Drop (Wizzrobes and Bubbles East)
        - Level 9 Key Drop (Wizzrobes East Island)
        - Level 9 Bomb Drop (Blue Lanmolas)
        - Level 9 Bomb Drop (Gels Lake)
        - Level 9 Bomb Drop (Like Likes and Zols Corridor)
        - Level 9 Bomb Drop (Vires)
        - Level 9 Rupee Drop (Wizzrobes West Island)
        - Level 9 Rupee Drop (Red Lanmolas)
        - Level 9 Rupee Drop (Keese Central Island)
        - Level 9 Rupee Drop (Wizzrobes Central)
        - Level 9 Rupee Drop (Gels East)
      from_pool: true
      world: false
  
  # TODO Think about which items benefit from being forced to be local.
  # Seeds suck a bit if you're BKed forever, but some of the fun of the multiworld
  # is the randomness. Gotta find a balance.
  #
  # Notable items that benefit from being local (unblocking BKs):
  # Recorder, Stepladder
  #
  # Maybe:
  # Blue Ring, Bow, a fire source
  #
  # Probably not needed:
  # Silver Arrow, Food

  # TODO Think about junking certain items that are not useful.
  #
  # Examples:
  # Boomerang, Magical Boomerang



# Slay the Spire

Slay the Spire:
  progression_balancing: 50
  accessibility: items

  start_hints:
    - Boss Relic

  # Trying this out. Should be fun.
  priority_locations: 
    [
      "Boss Relic 1", "Boss Relic 2",
      "Card Draw 4", "Card Draw 5", "Card Draw 6",
      "Card Draw 7", "Card Draw 8", "Card Draw 9",
      "Card Draw 10", "Card Draw 11", "Card Draw 12", 
      "Rare Card Draw 1", "Rare Card Draw 2",
      "Relic 1", "Relic 2", "Relic 3", "Relic 4", "Relic 5",
    ]

  character:
    the_ironclad: 1
    the_silent: 2
    the_defect: 1
    the_watcher: 0
    spire_take_the_wheel: 0
  
  # low% + high ascension = bad times, so we do Ascension 0.
  ascension: 0

  # Same deal.
  final_act: false

  # No Downfall yet.
  downfall: false



# Risk of Rain 2

Risk of Rain 2:
  progression_balancing: 50
  accessibility: items

  # Force these locations to be junk. The main reason to do this is twofold: 
  # - It lets RoR2 hoover up bad items for other players.
  # - It excludes late chest checks (since they take a long time), without 
  #   shrinking the amount of items RoR2 adds to the pool.
  exclude_locations:
    [
      "ItemPickup51", "ItemPickup52", "ItemPickup53", "ItemPickup54", "ItemPickup55",
      "ItemPickup56", "ItemPickup57", "ItemPickup58", "ItemPickup59", "ItemPickup60",
      "ItemPickup61", "ItemPickup62", "ItemPickup63", "ItemPickup64", "ItemPickup65",
      "ItemPickup66", "ItemPickup67", "ItemPickup68", "ItemPickup69", "ItemPickup70",
      "ItemPickup71", "ItemPickup72", "ItemPickup73", "ItemPickup74", "ItemPickup75",
      "ItemPickup76", "ItemPickup77", "ItemPickup78", "ItemPickup79", "ItemPickup80",
      "ItemPickup81", "ItemPickup82", "ItemPickup83", "ItemPickup84", "ItemPickup85",
      "ItemPickup86", "ItemPickup87", "ItemPickup88", "ItemPickup89", "ItemPickup90",
      "ItemPickup91", "ItemPickup92", "ItemPickup93", "ItemPickup94", "ItemPickup95",
      "ItemPickup96", "ItemPickup97", "ItemPickup98", "ItemPickup99", "ItemPickup100",
    ]

  non_local_items:
    - Uncommon Item
    - Legendary Item
    - Boss Item
    - Money
    - 1000 Exp

  # Start with these locations and their item prefilled into the !hint command
  start_hints:
    - Legendary Item
    - Boss Item

  dlc_sotv: true

  # I think randomising victory is fun, but for the sake of shorts, best to
  # keep it to any. Final stage death stays off though. Git gud.
  victory: any
  final_stage_death: false

  # In my experience, Explore ends up being *very* time-consuming.
  # My hopes with Classic is to capture the joy of Risk of Rain 2,
  # without all the hassle of frequent and tedious BK chains that Explore
  # tends to bring.
  goal: classic

  # I'm super mixed on this.
  # - Every chest is obviously terrible, it breaks the game.
  # - Every second feels like it eats a lot of your items.
  # - Every third is... weird. You send less checks but you do actually get to play
  #   the game.
  item_pickup_step: 2

  # Who needs 'em? (Maybe me. We'll see.)
  start_with_revive: false

  # I'm trying a new thing where I have an exact, perfect distribution of
  # each item type, summing to the total locations count. This will allow
  # full flexibility in controlling the item pool.
  # Range is 40-250.
  total_locations: 100

  # Use my own custom weights.
  item_pool_presets: false

  # Items.
  common_item: 40
  uncommon_item: 20
  legendary_item: 5
  boss_item: 5

  # Scrap.
  white_scrap: 15
  green_scrap: 5
  red_scrap: 0
  yellow_scrap: 0

  # Consumables.
  money: 5
  experience: 5

  # Don't want random equipment from other players.
  equipment: 0

  # Lunars and void items are both terrible to receive randomly.
  enable_lunar: false
  lunar_item: 0
  void_item: 0
  lunar_coin: 0

  # Dio's? No thanks.
  total_revivals: 0

  # Also not a fan of traps.
  enable_trap: false
  mountain_trap: 0
  time_warp_trap: 0
  combat_trap: 0
  teleport_trap: 0



# Kingdom Hearts 2

Kingdom Hearts 2:
  progression_balancing: 50
  accessibility: items

  exclude_locations:
    - Transport to Remembrance

  start_inventory:
    Scan: 1
    Aerial Recovery: 1
    Draw: 1

  # Options: 1, 50, 99, 50_sanity, 99_sanity
  # sanity is "all levels are checks", non is "only 23 levels are checks"
  LevelDepth: level_1

  Sora_Level_EXP: 6

  Valor_Form_EXP: 8
  Wisdom_Form_EXP: 3
  Limit_Form_EXP: 3
  Master_Form_EXP: 3
  Final_Form_EXP: 3

  Summon_EXP: 10

  # Ranges from 0 to 4
  Schmovement: level_1
  RandomGrowth: 0

  AntiForm: false

  Promise_Charm: true

  Goal:
    # Win Condition
    # Three Proofs: Find the 3 Proofs to unlock the final door.
    # 
    # Lucky Emblem Hunt: Find required amount of Lucky Emblems.
    # 
    # Hitlist (Bounty Hunt): Find required amount of Bounties.
    # 
    # Lucky Emblem and Hitlist: Find the required amount of Lucky Emblems and Bounties.
    three_proofs: 1
    lucky_emblem_hunt: 1
    hitlist: 0
    hitlist_and_lucky_emblem: 0

  # Nowadays, we are gaming.
  FinalXemnas: true

  # Range: 1 to 60
  LuckyEmblemsRequired: 25
  LuckyEmblemsAmount: 40
  # LuckyEmblemsRequired: 40
  # LuckyEmblemsAmount: 50

  Keyblade_Minimum: 3
  Keyblade_Maximum: 10

  # Start with Weapon Slots' Hinted
  WeaponSlotStartHint: false

  # Options: easy, normal, hard
  FightLogic: normal

  FinalFormLogic:
    # Determines forcing final form logic
    # 
    # No Light and Darkness: Light and Darkness is not in logic.
    # Light And Darkness: Final Forcing with light and darkness is in logic.
    # Just a Form: All that requires final forcing is another form.
    no_light_and_darkness: 0
    light_and_darkness: 50
    just_a_form: 0

  AutoFormLogic: false

  # Toggles if on Donald and Goofy's Get Bonus locations can be any item
  DonaldGoofyStatsanity: true

  # Make all dynamic filler classified items local. Recommended when playing with games
  # with fewer locations than kh2
  FillerItemsLocal: true

  Visitlocking:
    # Determines the level of visit locking
    # 
    # No Visit Locking: Start with all 25 visit locking items.
    #
    # Second Visit Locking: Start with 13 visit locking items for every first visit.
    #
    # First and Second Visit Locking: One item for First Visit Two For Second Visit
    no_visit_locking: 0
    second_visit_locking: 0
    first_and_second_visit_locking: 50

  RandomVisitLockingItem: random-range-1-4

  SuperBosses: false
  Cups: no_cups

  # Toggle Summon levels to have locations.
  SummonLevelLocationToggle: true

  # Is Atlantica on?
  AtlanticaToggle: false

  # Note: this doesn't ACTUALLY skip CoR. Still need to `exclude_locations` this one.
  CorSkipToggle: true

  CustomItemPoolQuantity:
    # Add more of an item into the itempool. Note: You cannot take out items from the pool.
    Aerial Dodge: 1
    Battlefields of War: 2
    Beast's Claw: 2
    Blizzard Element: 3
    Bone Fist: 2
    Chicken Little: 1
    Cure Element: 3
    Disney Castle Key: 2
    Dodge Roll: 4
    Final Form: 1
    Fire Element: 3
    Genie: 1
    Glide: 4
    High Jump: 4
    Ice Cream: 3
    Identity Disk: 2
    Limit Form: 1
    Magnet Element: 3
    Master Form: 1
    Membership Card: 2
    Namine Sketches: 1
    Peter Pan: 1
    Promise Charm: 1
    Proof of Connection: 1
    Proof of Nonexistence: 1
    Proof of Peace: 1
    Proud Fang: 2
    Quick Run: 4
    Reflect Element: 3
    Scimitar: 2
    Skill and Crossbones: 2
    Stitch: 1
    Sword of the Ancestor: 2
    Thunder Element: 3
    Torn Page: 5
    Valor Form: 1
    Way to the Dawn: 2
    Wisdom Form: 1



# A Link to the Past

A Link to the Past:
  progression_balancing: 50
  accessibility: items

  start_inventory_from_pool:
    Pegasus Boots: 1

  goal: ganon

  mode: open

  glitches_required: no_glitches

  dark_room_logic: lamp

  open_pyramid: open

  crystals_needed_for_gt: 3
  crystals_needed_for_ganon: 3

  entrance_shuffle: vanilla

  big_key_shuffle: original_dungeon
  small_key_shuffle: original_dungeon

  key_drop_shuffle: false

  map_shuffle: start_with
  compass_shuffle: start_with

  item_pool: normal
  item_functionality: normal

  progressive: on

  swordless: false

  dungeon_counters: on

  retro_bow: false
  retro_caves: false

  hints: on

  scams: all

  boss_shuffle: none

  pot_shuffle: false
  enemy_shuffle: false

  killable_thieves: true

  bush_shuffle: false

  shop_item_slots: 0

  randomize_shop_inventories: default
  shuffle_shop_inventories: false

  include_witch_hut: false

  randomize_shop_prices: false

  # Prices of the items in shop inventories may cost hearts, arrow, or bombs instead of rupees
  # What the fuck?
  randomize_cost_types: false

  shop_price_modifier: 100

  shuffle_capacity_upgrades: on

  bombless_start: false

  shuffle_prizes: general

  tile_shuffle: false

  misery_mire_medallion: ether

  turtle_rock_medallion: quake

  glitch_boots: true

  beemizer_total_chance: 10

  timer:
    # None: No timer will be displayed. OHKO: Timer always at zero. Permanent OHKO.
    # Timed: Starts with clock at zero. Green clocks subtract 4 minutes (total 20). Blue clocks subtract 2 minutes (total 10). Red clocks add two minutes (total 10). Winner is the player with the lowest time at the end.
    # Timed OHKO: Starts the clock at ten minutes. Green clocks add five minutes (total 25). As long as the clock as at zero, Link will die in one hit.
    # Timed Countdown: Starts the clock with forty minutes. Same clocks as timed mode, but if the clock hits zero you lose. You can still keep playing, though.
    # Display: Displays a timer, but otherwise does not affect gameplay or the item pool.
    none: 50
    timed: 0
    timed_ohko: 0
    ohko: 0
    timed_countdown: 0
    display: 0

  countdown_start_time:
    # For Timed OHKO and Timed Countdown timer modes, the amount of time in minutes to start with.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 480
    10: 50
    random: 0
    random-low: 0
    random-high: 0

  red_clock_time:
    # For all timer modes, the amount of time in minutes to gain or lose when picking up a red clock.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is -60
    # Maximum value is 60
    -2: 50
    random: 0
    random-low: 0
    random-high: 0

  blue_clock_time:
    # For all timer modes, the amount of time in minutes to gain or lose when picking up a blue clock.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is -60
    # Maximum value is 60
    2: 50
    random: 0
    random-low: 0
    random-high: 0

  green_clock_time:
    # For all timer modes, the amount of time in minutes to gain or lose when picking up a green clock.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is -60
    # Maximum value is 60
    4: 50
    random: 0
    random-low: 0
    random-high: 0

  death_link: false

  allow_collect: false

  ow_palettes:
    # The type of palette shuffle to use for the overworld
    default: 50
    good: 0
    blackout: 0
    puke: 0
    classic: 0
    grayscale: 0
    negative: 0
    dizzy: 0
    sick: 0

  uw_palettes:
    # The type of palette shuffle to use for the underworld (caves, dungeons, etc.)
    default: 50
    good: 0
    blackout: 0
    puke: 0
    classic: 0
    grayscale: 0
    negative: 0
    dizzy: 0
    sick: 0

  hud_palettes:
    # The type of palette shuffle to use for the HUD
    default: 50
    good: 0
    blackout: 0
    puke: 0
    classic: 0
    grayscale: 0
    negative: 0
    dizzy: 0
    sick: 0

  sword_palettes:
    # The type of palette shuffle to use for the sword
    default: 50
    good: 0
    blackout: 0
    puke: 0
    classic: 0
    grayscale: 0
    negative: 0
    dizzy: 0
    sick: 0

  shield_palettes:
    # The type of palette shuffle to use for the shield
    default: 50
    good: 0
    blackout: 0
    puke: 0
    classic: 0
    grayscale: 0
    negative: 0
    dizzy: 0
    sick: 0

  heartbeep:
    # How quickly the heart beep sound effect will play
    normal: 50
    double: 0
    half: 0
    quarter: 0
    off: 0

  heartcolor:
    # The color of hearts in the HUD
    red: 50
    blue: 0
    green: 0
    yellow: 0

  quickswap: true

  menuspeed:
    # How quickly the menu appears/disappears
    normal: 50
    instant: 0
    double: 0
    triple: 0
    quadruple: 0
    half: 0

  music:
    # Whether background music will play in game
    false: 0
    true: 50

  reduceflashing:
    # Reduces flashing for certain scenes such as the Misery Mire and Ganon's Tower opening cutscenes
    false: 0
    true: 50

  triforcehud:
    # When and how the triforce hunt HUD should display
    normal: 50
    hide_goal: 0
    hide_required: 0
    hide_both: 0



# Hollow Knight

Hollow Knight:
  progression_balancing: 20
  accessibility: items

  # Allow for Dreamers to be randomized into the item pool and opens their locations for randomization.
  RandomizeDreamers: true

  # Allow for Skills, such as Mantis Claw or Shade Soul, to be randomized into the item pool. Also opens their locations
  # for receiving randomized items.
  RandomizeSkills: true

  # Removes the ability to focus and randomizes it into the item pool.
  RandomizeFocus: false

  # Removes the ability to swim in water and randomizes it into the item pool.
  RandomizeSwim: false

  RandomizeCharms:
    # Allow for Charms to be randomized into the item pool and open their locations for randomization. Includes Charms
    # sold in shops.
    false: 0
    true: 50

  RandomizeKeys:
    # Allow for Keys to be randomized into the item pool. Includes those sold in shops.
    false: 0
    true: 50

  RandomizeMaskShards:
    # Allow for Mask Shard to be randomized into the item pool and open their locations for randomization.
    false: 0
    true: 50

  RandomizeVesselFragments:
    # Allow for Vessel Fragments to be randomized into the item pool and open their locations for randomization.
    false: 0
    true: 50

  RandomizeCharmNotches:
    # Allow for Charm Notches to be randomized into the item pool. Includes those sold by Salubra.
    false: 0
    true: 50

  RandomizePaleOre:
    # Randomize Pale Ores into the item pool and open their locations for randomization.
    false: 0
    true: 50

  RandomizeGeoChests:
    # Allow for Geo Chests to contain randomized items, as well as their Geo reward being randomized into the item pool.
    false: 50
    true: 0

  RandomizeJunkPitChests:
    # Randomize the contents of junk pit chests into the item pool and open their locations for randomization.
    false: 50
    true: 0

  RandomizeRancidEggs:
    # Randomize Rancid Eggs into the item pool and open their locations for randomization
    false: 50
    true: 0

  # Randomize Relics (King's Idol, et al.) into the item pool and open their locations for randomization.
  RandomizeRelics: true

  RandomizeWhisperingRoots:
    # Randomize the essence rewards from Whispering Roots into the item pool. Whispering Roots will now grant a randomized
    # item when completed. This can be previewed by standing on the root.
    false: 50
    true: 0

  RandomizeBossEssence:
    # Randomize boss essence drops, such as those for defeating Warrior Dreams, into the item pool and open their locations
    # for randomization.
    false: 50
    true: 0

  # Randomize Grubs into the item pool and open their locations for randomization.
  RandomizeGrubs: true

  RandomizeMimics:
    # Randomize Mimic Grubs into the item pool and open their locations for randomization.
    false: 50
    true: 0

  RandomizeMaps:
    # Randomize Maps into the item pool. This causes Cornifer to give you a message allowing you to see and buy an item
    # that is randomized into that location as well.
    false: 50
    true: 0

  RandomizeStags:
    # Randomize Stag Stations unlocks into the item pool as well as placing randomized items on the stag station bell/toll.
    false: 0
    true: 50

  RandomizeLifebloodCocoons:
    # Randomize Lifeblood Cocoon grants into the item pool and open their locations for randomization.
    false: 0
    true: 50

  RandomizeGrimmkinFlames:
    # Randomize Grimmkin Flames into the item pool and open their locations for randomization.
    false: 50
    true: 0

  RandomizeJournalEntries:
    # Randomize the Hunter's Journal as well as the findable journal entries into the item pool, and open their locations
    # for randomization. Does not include journal entries gained by killing enemies.
    false: 50
    true: 0

  RandomizeNail:
    # Removes the ability to swing the nail left, right and up, and shuffles these into the item pool.
    false: 50
    true: 0

  RandomizeGeoRocks:
    # Randomize Geo Rock rewards into the item pool and open their locations for randomization.
    false: 50
    true: 0

  # Randomize boss Geo drops into the item pool and open those locations for randomization.
  RandomizeBossGeo: true

  RandomizeSoulTotems:
    # Randomize Soul Refill items into the item pool and open the Soul Totem locations for randomization.
    false: 50
    true: 0

  RandomizeLoreTablets:
    # Randomize Lore items into the itempool, one per Lore Tablet, and place randomized item grants on the tablets themselves.
    # You must still read the tablet to get the item.
    false: 50
    true: 0

  RandomizeElevatorPass:
    # Adds an Elevator Pass item to the item pool, which is then required to use the large elevators connecting
    # City of Tears to the Forgotten Crossroads and Resting Grounds.
    false: 50
    true: 0

  PreciseMovement:
    # Places skips into logic which require extremely precise player movement, possibly without movement skills such as
    # dash or hook.
    false: 50
    true: 0

  ProficientCombat:
    # Places skips into logic which require proficient combat, possibly with limited items.
    false: 50
    true: 0

  BackgroundObjectPogos:
    # Places skips into logic for locations which are reachable via pogoing off of background objects.
    false: 50
    true: 0

  EnemyPogos:
    # Places skips into logic for locations which are reachable via pogos off of enemies.
    false: 50
    true: 0

  ObscureSkips:
    # Places skips into logic which are considered obscure enough that a beginner is not expected to know them.
    false: 50
    true: 0

  ShadeSkips:
    # Places shade skips into logic which utilize the player's shade for pogoing or damage boosting.
    false: 50
    true: 0

  InfectionSkips:
    # Places skips into logic which are only possible after the crossroads become infected.
    false: 50
    true: 0

  FireballSkips:
    # Places skips into logic which require the use of spells to reset fall speed while in mid-air.
    false: 50
    true: 0

  SpikeTunnels:
    # Places skips into logic which require the navigation of narrow tunnels filled with spikes.
    false: 50
    true: 0

  AcidSkips:
    # Places skips into logic which require crossing a pool of acid without Isma's Tear, or water if swim is disabled.
    false: 50
    true: 0

  DamageBoosts:
    # Places skips into logic which require you to take damage from an enemy or hazard to progress.
    false: 50
    true: 0

  DangerousSkips:
    # Places skips into logic which contain a high risk of taking damage.
    false: 50
    true: 0

  DarkRooms:
    # Places skips into logic which require navigating dark rooms without the use of the Lumafly Lantern.
    false: 50
    true: 0

  ComplexSkips:
    # Places skips into logic which require intense setup or are obscure even beyond advanced skip standards.
    false: 50
    true: 0

  DifficultSkips:
    # Places skips into logic which are considered more difficult than typical.
    false: 50
    true: 0

  RemoveSpellUpgrades:
    # Removes the second level of all spells from the item pool.
    false: 50
    true: 0

  StartLocation:
    # Choose your start location. This is currently only locked to King's Pass.
    king's_pass: 50

  Goal:
    # The goal required of you in order to complete your run in Archipelago.
    any: 50
    hollowknight: 0
    siblings: 0
    radiance: 0

  WhitePalace:
    # Whether or not to include White Palace or not.  Note: Even if excluded, the King Fragment check may still be
    # required if charms are vanilla.
    exclude: 50
    kingfragment: 0
    nopathofpain: 0
    include: 0

  ExtraPlatforms:
    # Places additional platforms to make traveling throughout Hallownest more convenient.
    false: 0
    true: 50

  AddUnshuffledLocations:
    # Adds non-randomized locations to the location pool, which allows syncing
    # of location state with co-op or automatic collection via collect.
    # 
    # Note: This will increase the number of location checks required to purchase
    # hints to the total maximum.
    false: 50
    true: 0

  StartingGeo:
    # The amount of starting geo you have.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    0: 50
    random: 0
    random-low: 0
    random-high: 0

  DeathLink:
    # When you die, everyone dies. Of course the reverse is true too.
    false: 50
    true: 0

  DeathLinkShade:
    # Sets whether to create a shade when you are killed by a DeathLink and how to handle your existing shade, if any.
    # 
    # vanilla: DeathLink deaths function like any other death and overrides your existing shade (including geo), if any.
    # shadeless: DeathLink deaths do not spawn shades. Your existing shade (including geo), if any, is untouched.
    # shade: DeathLink deaths spawn a shade if you do not have an existing shade. Otherwise, it acts like shadeless.
    # 
    # * This option has no effect if DeathLink is disabled.
    # ** Self-death shade behavior is not changed; if a self-death normally creates a shade in vanilla, it will override
    #     your existing shade, if any.
    vanilla: 0
    shadeless: 0
    shade: 50

  DeathLinkBreaksFragileCharms:
    # Sets if fragile charms break when you are killed by a DeathLink.
    # 
    # * This option has no effect if DeathLink is disabled.
    # ** Self-death fragile charm behavior is not changed; if a self-death normally breaks fragile charms in vanilla, it
    #     will continue to do so.
    false: 50
    true: 0

  MinimumGeoPrice:
    # The minimum geo price for items in geo shops.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 200
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  MaximumGeoPrice:
    # The maximum geo price for items in geo shops.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 2000
    400: 50
    random: 0
    random-low: 0
    random-high: 0

  MinimumGrubPrice:
    # The minimum grub price in the range of prices that an item should cost from Grubfather.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 46
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  MaximumGrubPrice:
    # The maximum grub price in the range of prices that an item should cost from Grubfather.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 46
    23: 50
    random: 0
    random-low: 0
    random-high: 0

  MinimumEssencePrice:
    # The minimum essence price in the range of prices that an item should cost from Seer.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 2800
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  MaximumEssencePrice:
    # The maximum essence price in the range of prices that an item should cost from Seer.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 2800
    1400: 50
    random: 0
    random-low: 0
    random-high: 0

  MinimumCharmPrice:
    # The minimum charm price in the range of prices that an item should cost for Salubra's shop item which also
    # carry a charm cost.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 40
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  MaximumCharmPrice:
    # The maximum charm price in the range of prices that an item should cost for Salubra's shop item which also
    # carry a charm cost.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 40
    20: 50
    random: 0
    random-low: 0
    random-high: 0

  RandomCharmCosts:
    # Total Notch Cost of all Charms together. Vanilla sums to 90.
    # This value is distributed among all charms in a random fashion.
    # Special Cases:
    # Set to -1 or vanilla for vanilla costs.
    # Set to -2 or shuffle to shuffle around the vanilla costs to different charms.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 240
    random: 0
    random-low: 0
    random-high: 0
    vanilla: 50 # equivalent to -1
    shuffle: 0 # equivalent to -2

  PlandoCharmCosts:
    # Allows setting a Charm's Notch costs directly, mapping {name: cost}.
    # This is set after any random Charm Notch costs, if applicable.
    {}

  MinimumEggPrice:
    # The minimum rancid egg price in the range of prices that an item should cost from Jiji.
    # Only takes effect if the EggSlotShops option is greater than 0.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 21
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  MaximumEggPrice:
    # The maximum rancid egg price in the range of prices that an item should cost from Jiji.
    # Only takes effect if the EggSlotShops option is greater than 0.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 21
    10: 50
    random: 0
    random-low: 0
    random-high: 0

  EggShopSlots:
    # For each slot, add a location to the Egg Shop and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    0: 50
    random: 0
    random-low: 0
    random-high: 0

  SlyShopSlots:
    # For each extra slot, add a location to the Sly Shop and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    8: 50
    random: 0
    random-low: 0
    random-high: 0

  SlyKeyShopSlots:
    # For each extra slot, add a location to the Sly Shop (requiring Shopkeeper's Key) and a filler item to the item
    # pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    6: 50
    random: 0
    random-low: 0
    random-high: 0

  IseldaShopSlots:
    # For each extra slot, add a location to the Iselda Shop and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    2: 50
    random: 0
    random-low: 0
    random-high: 0

  SalubraShopSlots:
    # For each extra slot, add a location to the Salubra Shop, and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  SalubraCharmShopSlots:
    # For each extra slot, add a location to the Salubra Shop (requiring Charms), and a filler item to the item
    # pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  LegEaterShopSlots:
    # For each extra slot, add a location to the Leg Eater Shop and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    3: 50
    random: 0
    random-low: 0
    random-high: 0

  GrubfatherRewardSlots:
    # For each extra slot, add a location to the Grubfather and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    7: 50
    random: 0
    random-low: 0
    random-high: 0

  SeerRewardSlots:
    # For each extra slot, add a location to the Seer and a filler item to the item pool.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 16
    8: 50
    random: 0
    random-low: 0
    random-high: 0

  ExtraShopSlots:
    # For each extra slot, add a location to a randomly chosen shop a filler item to the item pool.
    # 
    # The Egg Shop will be excluded from this list unless it has at least one item.
    # 
    # Shops are capped at 16 items each.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 144
    0: 50
    random: 0
    random-low: 0
    random-high: 0

  SplitCrystalHeart:
    # Splits the Crystal Heart into left- and right-only versions of the item.
    false: 50
    true: 0

  SplitMothwingCloak:
    # Splits the Mothwing Cloak into left- and right-only versions of the item. Randomly adds a second left or
    # right Mothwing cloak item which functions as the upgrade to Shade Cloak.
    false: 50
    true: 0

  SplitMantisClaw:
    # Splits the Mantis Claw into left- and right-only versions of the item.
    false: 50
    true: 0

  CostSanity:
    # If enabled, most locations with costs (like stag stations) will have randomly determined costs.
    # If set to shopsonly, CostSanity will only apply to shops (including Grubfather, Seer and Egg Shop).
    # If set to notshops, CostSanity will only apply to non-shops (e.g. Stag stations and Cornifer locations)
    # 
    # These costs can be in Geo (except Grubfather, Seer and Eggshop), Grubs, Charms, Essence and/or Rancid Eggs
    off: 50
    on: 0
    shopsonly: 0
    notshops: 0

  CostSanityHybridChance:
    # The chance that a CostSanity cost will include two components instead of one, e.g. Grubs + Essence
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    10: 50
    random: 0
    random-low: 0
    random-high: 0

  CostSanityEggWeight:
    # The likelihood of Costsanity choosing a Egg cost. Chosen as a sum of all weights from other types.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  CostSanityGrubWeight:
    # The likelihood of Costsanity choosing a Grub cost. Chosen as a sum of all weights from other types.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  CostSanityEssenceWeight:
    # The likelihood of Costsanity choosing a Essence cost. Chosen as a sum of all weights from other types.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  CostSanityCharmWeight:
    # The likelihood of Costsanity choosing a Charm cost. Chosen as a sum of all weights from other types.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    1: 50
    random: 0
    random-low: 0
    random-high: 0

  CostSanityGeoWeight:
    # The likelihood of Costsanity choosing a Geo cost. Chosen as a sum of all weights from other types.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    8: 50
    random: 0
    random-low: 0
    random-high: 0
